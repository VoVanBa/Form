generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int              @id @default(autoincrement())
  username      String           @unique
  email         String           @unique
  password      String
  refreshToken  String           @db.VarChar(1024)
  role          Role
  googleId      String?          @unique
  businesses    Business[]
  formResponses UserOnResponse[]
}

model Business {
  id        Int              @id @default(autoincrement())
  name      String
  address   String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  userId    Int
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  forms     SurveyFeedback[]
}

model SurveyFeedback {
  id                   Int                      @id @default(autoincrement())
  name                 String
  description          String?
  createdBy            String
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  type                 SurveyFeedbackType
  deletedAt            DateTime?
  allowAnonymous       Boolean                  @default(true)
  status               FormStatus               @default(DRAFT)
  businessId           Int
  businessSettings     SurveyFeedbackSettings[]
  business             Business                 @relation(fields: [businessId], references: [id])
  questions            Question[]
  userFormResponses    UserOnResponse[]
  configurations       QuestionConfiguration[]
  responses            ResponseOnQuestion[]
  surveyFeedbackEnding SurveyFeedbackEnding?
}

model SurveyFeedbackEnding {
  id          Int            @id @default(autoincrement())
  formId      Int            @unique
  message     String         @default("Cảm ơn quý khách đã trả lời khảo sát")
  redirectUrl String?
  mediaId     Int?
  form        SurveyFeedback @relation(fields: [formId], references: [id], onDelete: Cascade)
  media       Media?         @relation(fields: [mediaId], references: [id], onDelete: Cascade)
}

model UserOnResponse {
  id                  Int                  @id @default(autoincrement())
  formId              Int
  userId              Int?
  guest               Json?
  sentAt              DateTime             @default(now())
  completedAt         DateTime?
  responseOnQuestions ResponseOnQuestion[]
  form                SurveyFeedback       @relation(fields: [formId], references: [id], onDelete: Cascade)
  user                User?                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([formId])
  @@index([userId])
}

model ResponseOnQuestion {
  id               Int             @id @default(autoincrement())
  useronResponseId Int
  questionId       Int
  formId           Int
  answerOptionId   Int?
  answerText       String?         @db.Text
  ratingValue      Int?
  otherAnswer      String?         @db.Text
  skipped          Boolean         @default(false)
  answeredAt       DateTime        @default(now())
  answerOption     AnswerOption?    @relation(fields: [answerOptionId], references: [id], onDelete: Cascade)
  question         Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userResponse     UserOnResponse? @relation(fields: [useronResponseId], references: [id], onDelete: Cascade)
  form             SurveyFeedback  @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@index([useronResponseId])
}

// model SettingTypes {
//   id          Int                      @id @default(autoincrement())
//   name        String                   @unique
//   description String
//   settings    SurveyFeedbackSettings[]
// }

// model SurveyFeedbackSettings {
//   id                             Int                              @id @default(autoincrement())
//   key                            String                           @unique
//   value                          Json
//   label                          String?
//   description                    String?
//   formSettingTypesId             Int?
//   formSettingTypes               SettingTypes?                    @relation(fields: [formSettingTypesId], references: [id], onDelete: Cascade)
//   businessSurveyFeedbackSettings BusinessSurveyFeedbackSettings[]
// }

model SurveyFeedbackSettings {
  id     Int              @id @default(autoincrement())
  formId Int
  key    SurveySettingKey
  value  Json
  form   SurveyFeedback   @relation(fields: [formId], references: [id], onDelete: Cascade)
}

model Question {
  id                    Int                    @id @default(autoincrement())
  headline              String
  questionType          QuestionType
  formId                Int
  index                 Int
  deletedAt             DateTime?
  answerOptions         AnswerOption[]
  responseOnQuestions   ResponseOnQuestion[]
  form                  SurveyFeedback         @relation(fields: [formId], references: [id])
  questionOnMedia       QuestionOnMedia?
  questionConfiguration QuestionConfiguration?

  // Quan hệ logic
  sourceLogics QuestionLogic[] @relation("LogicSource")
  targetLogics QuestionLogic[] @relation("LogicTarget")

  @@index([formId])
  @@index([id])
  @@index([deletedAt])
}

model QuestionLogic {
  id               Int             @id @default(autoincrement())
  questionId       Int
  conditionType    ConditionType
  conditionValue   Json
  logicalOperator  LogicalOperator @default(AND)
  actionType       ActionType      @default(JUMP)
  jumpToQuestionId Int?

  sourceQuestion Question  @relation("LogicSource", fields: [questionId], references: [id], onDelete: Cascade)
  targetQuestion Question? @relation("LogicTarget", fields: [jumpToQuestionId], references: [id])

  @@index([actionType])
}

model QuestionConfiguration {
  id         Int            @id @default(autoincrement())
  questionId Int            @unique
  formId     Int
  key        String
  settings   Json
  question   Question       @relation(fields: [questionId], references: [id])
  form       SurveyFeedback @relation(fields: [formId], references: [id])
}

model QuestionOnMedia {
  id         Int       @id @default(autoincrement())
  mediaId    Int
  questionId Int?      @unique
  media      Media     @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model AnswerOption {
  id                  Int                  @id @default(autoincrement())
  questionId          Int
  label               String?
  isActive            Boolean              @default(true)
  index               Int?
  description         String?
  question            Question             @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answerOptionOnMedia AnswerOptionOnMedia?
  responseOnQuestions ResponseOnQuestion[]
}

model AnswerOptionOnMedia {
  id             Int           @id @default(autoincrement())
  mediaId        Int
  answerOptionId Int?          @unique
  answerOption   AnswerOption? @relation(fields: [answerOptionId], references: [id], onDelete: Cascade)
  media          Media         @relation(fields: [mediaId], references: [id], onDelete: Cascade)
}

model Media {
  id                   Int                    @id @default(autoincrement())
  url                  String
  fileName             String
  mimeType             String
  size                 Int
  createdAt            DateTime               @default(now())
  answerOptionOnMedia  AnswerOptionOnMedia[]
  questionOnMedia      QuestionOnMedia[]
  SurveyFeedbackEnding SurveyFeedbackEnding[]
}

enum FormStatus {
  DRAFT
  PUBLISHED
  COMPLETED
}

enum Role {
  ADMIN
  CUSTOMER
}

enum QuestionType {
  SINGLE_CHOICE
  MULTI_CHOICE
  INPUT_TEXT
  RATING_SCALE
  PICTURE_SELECTION
}

enum SurveyFeedbackType {
  SURVEY
  FEEDBACK
}

enum ConditionType {
  EQUALS // Bằng chính xác (cho single choice, text)
  NOT_EQUALS // Không bằng
  GREATER_THAN // Lớn hơn (cho rating)
  LESS_THAN // Nhỏ hơn
  CONTAINS // Chứa giá trị (cho multi choice)
  NOT_CONTAINS // Không chứa giá trị
  BETWEEN // Nằm trong khoảng
}

enum LogicalOperator {
  AND
  OR
}

enum QuestionRole {
  SOURCE
  TARGET
}

enum SurveySettingKey {
  CLOSE_ON_RESPONSE_LIMIT // Đóng khảo sát khi đạt giới hạn phản hồi
  RELEASE_ON_DATE // Mở khảo sát vào ngày cụ thể
  CLOSE_ON_DATE // Đóng khảo sát vào ngày cụ thể
  SHOW_ONLY_ONCE // Chỉ hiển thị một lần
  SHOW_MULTIPLE_TIMES // Hiển thị nhiều lần
  UNTIL_SUBMIT_RESPONSE // Cho đến khi họ gửi phản hồi
  KEEP_SHOWING_WHILE_CONDITIONS_MATCH // Tiếp tục hiển thị nếu điều kiện vẫn phù hợp
  IGNORE_WAITING_TIME // Bỏ qua thời gian chờ giữa các khảo sát
  POSITION // Vị trí khảo sát
  EMAIL_NOTIFICATION // Thông báo qua email
}

enum ActionType {
  JUMP
  SHOW
  HIDE
}
